Answers to Questions :
1)In order to get the first 100 images I would parse the html returned and extract the first 100 image tags instead of just the first one. I would perform all the operations that I am currently for a single image for all the images and then display all the images with tags on the resulting page.

2) In this case I will create a Multi-Threaded system that would help me service requests even when the server is busy serving one of the requests that is taking more time.
I would create a thread pool that would have a certain limit on the maximum no of concurrent threads and then if one of the threads is taking too much time and there are other
free threads in the pool then I can use them to service any new requests.

3)I used this database model because it would help me get all the details of the image if required. It is a semi relational model with the tags and metadata being a nosql(JSON) type of entity
and the other fields like image, url are strings . Another database model could be a fully noSql model where I can store the whole data in a NoSql database . But since in the current model
I have stored the image tags and metadata fields as JSON types in the image table it wouldn’t have much advantage because these are the two fields that would have any nested structure or 
list like structure that would favor a nosql database . Since these are already stored in a Nosql fashion I think this model has the same advantages of a nosql model.

4) In order to test the system I would test using the corner cases like an empty query string or a query string like %$#@ which doesn’t have any meaning and will return 0 images.
Another test case would be the case when Imagga doesn’t return any tags. In all the cases the application should return an error message whose description message matches the situation.I tested my code on the cases mentioned